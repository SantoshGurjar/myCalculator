{"version":3,"sources":["Todo.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","_ref","todo","toggleTodo","react_default","a","createElement","type","checked","complete","onChange","id","name","TodoList","todos","map","key","LOCAL_STORAGE_KEY","numberOfTask","App","_useState","useState","_useState2","Object","slicedToArray","setTodos","todoNameRef","useRef","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","Fragment","newTodos","toConsumableArray","find","ref","onClick","current","value","prevTodos","concat","uuidv4","filter","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"+KAEe,SAASA,EAAIC,GAAqB,IAAlBC,EAAID,EAAJC,KAAMC,EAAUF,EAAVE,WAIjC,OACAC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,WAAWC,QAASN,EAAKO,SAAUC,SANnD,WACIP,EAAWD,EAAKS,OAMfT,EAAKU,OCPC,SAASC,EAAQZ,GAAqB,IAAnBa,EAAKb,EAALa,MAAOX,EAAUF,EAAVE,WACrC,OACIW,EAAMC,IAAI,SAAAb,GACR,OAAOE,EAAAC,EAAAC,cAACN,EAAI,CAACgB,IAAKd,EAAKS,GAAIR,WAAYA,EAAYD,KAAMA,kBCF7De,EAAoB,gBAEtBC,EAAe,EAwEJC,MAtEf,WAGE,IAAAC,EAC0BC,mBAAS,IAAGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA/BN,EAAKQ,EAAA,GAAEG,EAAQH,EAAA,GAChBI,EAAcC,mBAmCpB,OAjCAC,oBAAU,WACR,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQhB,IACjDY,GAAaJ,EAASI,IACzB,IAEFD,oBAAU,WACRI,aAAaE,QAAQjB,EAAkBa,KAAKK,UAAUrB,KACtD,CAACA,IA4BDV,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+B,SAAA,KACAhC,EAAAC,EAAAC,cAACO,EAAQ,CAACC,MAAOA,EAAOX,WA3B1B,SAAoBQ,GAClB,IAAM0B,EAAQd,OAAAe,EAAA,EAAAf,CAAOT,GACfZ,EAAOmC,EAASE,KAAK,SAAArC,GAAI,OAAIA,EAAKS,KAAOA,IAC/CT,EAAKO,UAAYP,EAAKO,SACtBgB,EAASY,MAwBTjC,EAAAC,EAAAC,cAAA,SAAOkC,IAAOd,EAAanB,KAAO,SAClCH,EAAAC,EAAAC,cAAA,UAAQmC,QAtBV,WACI,IAAM7B,EAAOc,EAAYgB,QAAQC,MACrB,KAAT/B,IACHa,EAAS,SAAAmB,GACP,SAAAC,OAAAtB,OAAAe,EAAA,EAAAf,CAAWqB,GAAS,CAAC,CAACjC,GAAGmC,cAASlC,KAAKA,EACrCH,UAAS,OAEbiB,EAAYgB,QAAQC,MAAQ,KAC5BzB,GAAc,KAciB,cACjCd,EAAAC,EAAAC,cAAA,UAAQmC,QAbV,WACE,IAAMJ,EAAWvB,EAAMiC,OAAO,SAAA7C,GAAI,OAAKA,EAAKO,WACzC4B,IACDnB,GAAe,EACfO,EAASY,MASuB,0BAClCjC,EAAAC,EAAAC,cAAA,eAAOY,EAAY,iBC3CR8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAApD,GAAiD,IAA9CsD,EAAMtD,EAANsD,OAAQC,EAAMvD,EAANuD,OAAQC,EAAMxD,EAANwD,OAAQC,EAAMzD,EAANyD,OAAQC,EAAO1D,EAAP0D,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH5D,EAAAC,EAAAC,cAACF,EAAAC,EAAM4D,WAAU,KACf7D,EAAAC,EAAAC,cAAC4D,EAAG,QAORlB","file":"static/js/main.cfb90fa1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Todo ({todo, toggleTodo}){\r\n    function handleTodoClick(){\r\n        toggleTodo(todo.id)\r\n    }\r\n    return (\r\n    <div>\r\n        <label>\r\n        <input type=\"checkbox\" checked={todo.complete} onChange = {handleTodoClick}/>\r\n        {todo.name}\r\n        </label>\r\n    </div>\r\n)\r\n}\r\n","\r\nimport React from 'react'\r\nimport Todo from './Todo'\r\nexport default function TodoList({todos, toggleTodo}){\r\n    return (\r\n        todos.map(todo => {\r\n          return <Todo key={todo.id} toggleTodo={toggleTodo} todo={todo}/>\r\n        })\r\n    )\r\n}\r\n","import React ,{useState, useRef, useEffect} from 'react'\nimport TodoList from './TodoList'\nimport {v4 as uuidv4} from 'uuid'\n\nconst LOCAL_STORAGE_KEY = 'todoApp.todos'\n\nvar numberOfTask = 0\n\nfunction App() {\n\n  // const [todos, setToDos] = useState([{id:1,name: 'Todo 1',\n  // complete :false}]);\n  const [todos, setTodos] = useState([])\n  const todoNameRef = useRef()\n\n  useEffect(()=>{\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\n    if(storedTodos) setTodos(storedTodos)\n  },[])\n\n  useEffect(()=>{\n    localStorage.setItem(LOCAL_STORAGE_KEY,JSON.stringify(todos))\n  },[todos])\n\n  function toggleTodo(id){\n    const newTodos = [...todos]\n    const todo = newTodos.find(todo => todo.id === id)\n    todo.complete = !todo.complete\n    setTodos(newTodos)\n  }\n\n  function handleAddTodo(){\n      const name = todoNameRef.current.value\n      if(name === '') return \n      setTodos(prevTodos =>{\n        return [...prevTodos,{id:uuidv4(),name:name,\n          complete:false}]\n      })\n      todoNameRef.current.value = null\n      numberOfTask+=1\n  }\n  function handleClearTodos() {\n    const newTodos = todos.filter(todo => !todo.complete)\n    if(newTodos){\n      numberOfTask -=1\n      setTodos(newTodos)\n    }\n  }\n  return (\n\n    <>\n    <TodoList todos={todos} toggleTodo = {toggleTodo}/>\n    <input ref = {todoNameRef} type = 'text'/>\n    <button onClick = {handleAddTodo} > Add Todo </button>\n    <button onClick={handleClearTodos}> clear completed ToDos</button>\n    <div> {numberOfTask} Left to do</div>\n    </>\n  )\n// return (\n//   <div className=\"App\">\n//     <header className=\"App-header\">\n//       <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//       <p>\n//         Edit <code>src/App.js</code> and save to reload.\n//       </p>\n//       <a\n//         className=\"App-link\"\n//         href=\"https://reactjs.org\"\n//         target=\"_blank\"\n//         rel=\"noopener noreferrer\"\n//       >\n//         Learn React Today\n//       </a>\n//     </header>\n//   </div>\n// );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}